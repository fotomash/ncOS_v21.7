{
  "config/predictive_engine_config.yaml": {
    "path": "config/predictive_engine_config.yaml",
    "category": "engines",
    "config": {
      "predictive_scorer": {
        "enabled": true,
        "factor_weights": {
          "htf_bias_alignment": 0.2,
          "idm_detected_clarity": 0.1,
          "sweep_validation_strength": 0.15,
          "choch_confirmation_score": 0.15,
          "poi_validation_score": 0.2,
          "tick_density_score": 0.1,
          "spread_stability_score": 0.1
        },
        "grade_thresholds": {
          "A": 0.85,
          "B": 0.7,
          "C": 0.55
        },
        "min_score_to_emit_potential_entry": 0.65,
        "conflict_detection_settings": {
          "enabled": true,
          "min_new_setup_maturity_for_conflict_alert": 0.7,
          "suggest_review_trade_if_new_setup_maturity_above": 0.8
        }
      },
      "data_enricher": {
        "enabled": true,
        "calculate_tick_density": true,
        "calculate_spread_stability": true,
        "calculate_htf_alignment": true,
        "spread_tracker_config": {
          "enabled": true,
          "window_size": 25,
          "high_vol_baseline": 0.0008,
          "stability_threshold": 0.3
        }
      },
      "feature_extractor": {
        "enabled": true,
        "use_cached_features": true,
        "feature_cache_ttl_seconds": 300
      },
      "journaling": {
        "enabled": true,
        "log_all_evaluations": false,
        "min_maturity_score_to_log": 0.6,
        "log_format": "json",
        "log_directory": "logs/predictive_journal"
      }
    }
  },
  "consolidated_config/engines_consolidated.json": {
    "path": "consolidated_config/engines_consolidated.json",
    "category": "engines",
    "config": {
      "config/predictive_engine_config.yaml": {
        "path": "config/predictive_engine_config.yaml",
        "category": "engines",
        "config": {
          "predictive_scorer": {
            "enabled": true,
            "factor_weights": {
              "htf_bias_alignment": 0.2,
              "idm_detected_clarity": 0.1,
              "sweep_validation_strength": 0.15,
              "choch_confirmation_score": 0.15,
              "poi_validation_score": 0.2,
              "tick_density_score": 0.1,
              "spread_stability_score": 0.1
            },
            "grade_thresholds": {
              "A": 0.85,
              "B": 0.7,
              "C": 0.55
            },
            "min_score_to_emit_potential_entry": 0.65,
            "conflict_detection_settings": {
              "enabled": true,
              "min_new_setup_maturity_for_conflict_alert": 0.7,
              "suggest_review_trade_if_new_setup_maturity_above": 0.8
            }
          },
          "data_enricher": {
            "enabled": true,
            "calculate_tick_density": true,
            "calculate_spread_stability": true,
            "calculate_htf_alignment": true,
            "spread_tracker_config": {
              "enabled": true,
              "window_size": 25,
              "high_vol_baseline": 0.0008,
              "stability_threshold": 0.3
            }
          },
          "feature_extractor": {
            "enabled": true,
            "use_cached_features": true,
            "feature_cache_ttl_seconds": 300
          },
          "journaling": {
            "enabled": true,
            "log_all_evaluations": false,
            "min_maturity_score_to_log": 0.6,
            "log_format": "json",
            "log_directory": "logs/predictive_journal"
          }
        }
      },
      "docs/predictive_engine_phase1_summary.json": {
        "path": "docs/predictive_engine_phase1_summary.json",
        "category": "engines",
        "config": {
          "phase": "Phase 1 - Core Infrastructure",
          "status": "Complete",
          "modules_created": [
            "ncos_predictive_schemas.py - Pydantic models for validation",
            "ncos_predictive_engine.py - Main orchestrator with scoring and journaling",
            "ncos_feature_extractor.py - Feature extraction from market data",
            "ncos_data_enricher.py - Data enrichment pipeline"
          ],
          "configuration": "config/predictive_engine_config.yaml",
          "key_features": [
            "Multi-factor maturity scoring (7 factors)",
            "A/B/C/D grading system",
            "Conflict detection with active trades",
            "Predictive journaling with JSON/YAML support",
            "Data enrichment with technical indicators",
            "Spread stability tracking",
            "HTF alignment calculation"
          ],
          "next_phase": "Phase 2 - Integration with DivergenceStrategyAgent"
        }
      },
      "docs/PREDICTIVE_ENGINE_COMPLETE.json": {
        "path": "docs/PREDICTIVE_ENGINE_COMPLETE.json",
        "category": "engines",
        "config": {
          "project": "NCOS Predictive Engine",
          "version": "1.0.0",
          "status": "Complete",
          "phases_completed": [
            {
              "phase": 1,
              "name": "Core Implementation",
              "components": [
                "ncos_predictive_engine.py",
                "ncos_predictive_schemas.py",
                "ncos_feature_extractor.py",
                "ncos_data_enricher.py"
              ]
            },
            {
              "phase": 2,
              "name": "Strategy Integration",
              "components": [
                "Enhanced DivergenceStrategyAgent",
                "Quality-based trade filtering",
                "Dynamic risk adjustment"
              ]
            },
            {
              "phase": 3,
              "name": "Testing & Validation",
              "components": [
                "backtesting/engine.py",
                "grade_analysis_dashboard.py",
                "validate_predictive.py"
              ]
            }
          ],
          "key_features": [
            "7-factor quality scoring",
            "A/B/C/D grade assignment",
            "Intelligent trade filtering",
            "Dynamic position sizing",
            "Conflict detection",
            "Performance analytics"
          ],
          "files_created": [
            "ncos_predictive_engine.py",
            "ncos_predictive_schemas.py",
            "ncos_feature_extractor.py",
            "ncos_data_enricher.py",
            "ncos_divergence_strategy_agent.py",
            "backtesting/engine.py",
            "grade_analysis_dashboard.py",
            "validate_predictive.py",
            "test_predictive_engine.py",
            "scripts/quick_start_predictive.py",
            "PREDICTIVE_ENGINE_GUIDE.md",
            "config/predictive_engine_config.yaml",
            "config/agents.yaml (updated)"
          ],
          "quick_start": "Run 'python scripts/quick_start_predictive.py' to begin"
        }
      },
      "docs/predictive_engine_phase2_summary.json": {
        "path": "docs/predictive_engine_phase2_summary.json",
        "category": "engines",
        "config": {
          "phase": "Phase 2 - Strategy Integration",
          "status": "Complete",
          "enhancements": [
            "DivergenceStrategyAgent now uses Predictive Engine",
            "Quality-based trade filtering (only B-grade or better)",
            "Dynamic risk adjustment based on setup grade",
            "Comprehensive feature extraction from market data",
            "Conflict detection with active trades",
            "Detailed statistics tracking by grade"
          ],
          "new_features": [
            "Simulated pattern detection context",
            "Grade-based position sizing multipliers",
            "Enhanced logging with quality metrics",
            "Trade metadata includes setup grade and score"
          ],
          "configuration": {
            "min_grade_to_trade": "B",
            "grade_risk_multipliers": {
              "A": "120% risk",
              "B": "100% risk",
              "C": "70% risk",
              "D": "No trade"
            }
          },
          "testing": "Run test_predictive_engine.py to verify functionality"
        }
      }
    }
  },
  "docs/predictive_engine_phase1_summary.json": {
    "path": "docs/predictive_engine_phase1_summary.json",
    "category": "engines",
    "config": {
      "phase": "Phase 1 - Core Infrastructure",
      "status": "Complete",
      "modules_created": [
        "ncos_predictive_schemas.py - Pydantic models for validation",
        "ncos_predictive_engine.py - Main orchestrator with scoring and journaling",
        "ncos_feature_extractor.py - Feature extraction from market data",
        "ncos_data_enricher.py - Data enrichment pipeline"
      ],
      "configuration": "config/predictive_engine_config.yaml",
      "key_features": [
        "Multi-factor maturity scoring (7 factors)",
        "A/B/C/D grading system",
        "Conflict detection with active trades",
        "Predictive journaling with JSON/YAML support",
        "Data enrichment with technical indicators",
        "Spread stability tracking",
        "HTF alignment calculation"
      ],
      "next_phase": "Phase 2 - Integration with DivergenceStrategyAgent"
    }
  },
  "docs/PREDICTIVE_ENGINE_COMPLETE.json": {
    "path": "docs/PREDICTIVE_ENGINE_COMPLETE.json",
    "category": "engines",
    "config": {
      "project": "NCOS Predictive Engine",
      "version": "1.0.0",
      "status": "Complete",
      "phases_completed": [
        {
          "phase": 1,
          "name": "Core Implementation",
          "components": [
            "ncos_predictive_engine.py",
            "ncos_predictive_schemas.py",
            "ncos_feature_extractor.py",
            "ncos_data_enricher.py"
          ]
        },
        {
          "phase": 2,
          "name": "Strategy Integration",
          "components": [
            "Enhanced DivergenceStrategyAgent",
            "Quality-based trade filtering",
            "Dynamic risk adjustment"
          ]
        },
        {
          "phase": 3,
          "name": "Testing & Validation",
          "components": [
            "backtesting/engine.py",
            "grade_analysis_dashboard.py",
            "validate_predictive.py"
          ]
        }
      ],
      "key_features": [
        "7-factor quality scoring",
        "A/B/C/D grade assignment",
        "Intelligent trade filtering",
        "Dynamic position sizing",
        "Conflict detection",
        "Performance analytics"
      ],
      "files_created": [
        "ncos_predictive_engine.py",
        "ncos_predictive_schemas.py",
        "ncos_feature_extractor.py",
        "ncos_data_enricher.py",
        "ncos_divergence_strategy_agent.py",
        "backtesting/engine.py",
        "grade_analysis_dashboard.py",
        "validate_predictive.py",
        "test_predictive_engine.py",
        "scripts/quick_start_predictive.py",
        "PREDICTIVE_ENGINE_GUIDE.md",
        "config/predictive_engine_config.yaml",
        "config/agents.yaml (updated)"
      ],
      "quick_start": "Run 'python scripts/quick_start_predictive.py' to begin"
    }
  },
  "docs/predictive_engine_phase2_summary.json": {
    "path": "docs/predictive_engine_phase2_summary.json",
    "category": "engines",
    "config": {
      "phase": "Phase 2 - Strategy Integration",
      "status": "Complete",
      "enhancements": [
        "DivergenceStrategyAgent now uses Predictive Engine",
        "Quality-based trade filtering (only B-grade or better)",
        "Dynamic risk adjustment based on setup grade",
        "Comprehensive feature extraction from market data",
        "Conflict detection with active trades",
        "Detailed statistics tracking by grade"
      ],
      "new_features": [
        "Simulated pattern detection context",
        "Grade-based position sizing multipliers",
        "Enhanced logging with quality metrics",
        "Trade metadata includes setup grade and score"
      ],
      "configuration": {
        "min_grade_to_trade": "B",
        "grade_risk_multipliers": {
          "A": "120% risk",
          "B": "100% risk",
          "C": "70% risk",
          "D": "No trade"
        }
      },
      "testing": "Run test_predictive_engine.py to verify functionality"
    }
  }
}